<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- Connection properties -->
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		


		<!-- Pool properties -->
		<!-- Determines how many connections at a time c3p0 will try to acquire 
			when the pool is exhausted default -3 -->
		<property name="acquireIncrement" value="3" />
		<!-- Default: 30 Defines how many times c3p0 will try to acquire a new 
			Connection from the database before giving up. If this value is less than 
			or equal to zero, c3p0 will keep trying to fetch a Connection indefinitely. -->
		<property name="acquireRetryAttempts" value="3" />
		<property name="acquireRetryDelay" value="4500" /> <!-- milliseconds. time c3p0 will wait between acquire attempts -->
		<!-- autoCommitOnClose Default: false -->
		<property name="autoCommitOnClose" value="false" />
		<!-- Unreasonable values of initialPoolSize will be ignored, and minPoolSize 
			will be used instead. minPoolSize <= maxPoolSize. -->
		<property name="initialPoolSize" value="2" />
		<!-- Default: 15 Maximum number of Connections a pool will maintain at 
			any given time. -->
		<property name="maxPoolSize" value="45" />
		<!-- Default: 3 Minimum number of Connections a pool will maintain at any 
			given time. -->
		<property name="minPoolSize" value="2" />
		<!-- Default: 0 Seconds a Connection can remain pooled but unused before 
			being discarded. Zero means idle connections never expire -->
		<property name="maxIdleTime" value="10000" /> <!-- 1 hour -->

		<!-- Default: 0 Seconds, effectively a time to live. A Connection older 
			than maxConnectionAge will be destroyed and purged from the pool. This differs 
			from maxIdleTime in that it refers to absolute age. Even a Connection which 
			has not been much idle will be purged from the pool if it exceeds maxConnectionAge. 
			Zero means no maximum absolute age is enforced. -->
		<property name="maxConnectionAge" value="7200" /> <!-- 2hour -->
		<!-- maxIdleTimeExcessConnections is about minimizing the number of Connections 
			held by c3p0 pools when the pool is not under load. By default, c3p0 pools 
			grow under load, but only shrink if Connections fail a Connection test or 
			are expired away via the parameters described above. Some users want their 
			pools to quickly release unnecessary Connections after a spike in usage that 
			forces a large pool size. You can achieve this by setting maxIdleTimeExcessConnections 
			to a value much shorter than maxIdleTime, forcing Connections beyond your 
			set minimum size to be released if they sit idle for more than a short period 
			of time. -->
		<property name="maxIdleTimeExcessConnections" value="600" /> <!-- 10 minutes -->


		<!-- The point of Connection pooling is to bear the cost of acquiring a 
			Connection only once, and then to reuse the Connection many, many times. 
			Most databases support Connections that remain open for hours at a time. 
			There's no need to churn through all your Connections every few seconds or 
			minutes. Setting maxConnectionAge or maxIdleTime to 1800 (30 minutes) is 
			quite aggressive. For most databases, several hours may be more appropriate. 
			You can ensure the reliability of your Connections by testing them, rather 
			than by tossing them. (see Configuring Connection Testing.) The only one 
			of these parameters that should generally be set to a few minutes or less 
			is maxIdleTimeExcessConnections. -->


		<!-- <property name="maxStatements" value="50" /> Use only if statement 
			caching is used -->
		<property name="preferredTestQuery" value="select 1 from DUAL" />
		<!-- Most convenient way to speed up Connection testing is to define the 
			parameter automaticTestTable If provided, c3p0 will create an empty table 
			of the specified name, and use queries against that table to test the Connection. 
			If automaticTestTable is provided, c3p0 will generate its own test query, 
			therefore any preferredTestQuery set will be ignored. You should not work 
			with the named table after c3p0 creates it; it should be strictly for c3p0's 
			use in testing your Connection <property name="automaticTestTable" value 
			="connectionTestTable"/> -->

		<!-- The most reliable time to test Connections is on check-out. But this 
			is also the most costly choice from a client-performance perspective. Most 
			applications should work quite reliably using a combination of idleConnectionTestPeriod 
			and testConnectionsOnCheckIn. Both the idle test and the check-in test are 
			performed asynchronously, which leads to better performance, both perceived 
			and actual. -->

		<!-- idleConnectionTestPeriod Default: 0 If this is a number greater than 
			0, c3p0 will test all idle, pooled but unchecked-out connections, every this 
			number of seconds. -->
		<!-- Test the idle connections every 3 minutes (180) -->
		<property name="idleConnectionTestPeriod" value="1800" />
		<!-- testConnectionOnCheckin Default: false If true, an operation will 
			be performed asynchronously at every connection check-in to verify that the 
			connection is valid. Use in combination with idleConnectionTestPeriod for 
			quite reliable, always asynchronous Connection testing -->
		<property name="testConnectionOnCheckin" value="true" />

		<!-- testConnectionOnCheckout Default: false Use only if necessary. Expensive. 
			If true, an operation will be performed at every connection checkout to verify 
			that the connection is valid. -->
		<property name="testConnectionOnCheckout" value="false" />

		<!-- <property name="loginTimeout" value="30" /> -->

		<!-- On a need basis <property name="connectionCustomizerClassName" value="com.la.orp.utils.datasource.c3p.ConnectionPoolLogger"/> -->
	</bean>
	
</beans>