<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


	<import resource="studentapp-spring-c3p0.xml" />
	<!-- <import resource="classpath:/META-INF/spring/appServlet/studentapp-spring-c3p0.xml"/> -->
	

   <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
      <property name="dataSource" ref="c3p0DataSource" />
      <property name="packagesToScan" value="in.app.student.entity"></property>
      <property name="hibernateProperties">
			 <props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.showSql}</prop>
				<prop key="hibernate.format_sql">${hibernate.useSqlComments}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.formatSql}</prop>
				<prop key="hibernate.cache.provider_class">
					${hibernate.cacheProviderClass}
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">
					${hibernate.use_cache}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="org.hibernate.envers.store_data_at_delete">${hibernate.envers.store_data_at_delete}</prop>
				<prop key="org.hibernate.envers.revision_on_collection_change">${hibernate.envers.revision_on_collection_change}
				</prop>
				<prop key="org.hibernate.envers.track_entities_changed_in_revision">false</prop>
				<prop key="org.hibernate.envers.global_with_modified_flag">false</prop>

                 <!--added below for utf8 encoding -->
                 <prop key="hibernate.connection.CharSet">${hibernate.connection.CharSet}</prop>
                 <prop key="hibernate.connection.characterEncoding">${hibernate.connection.characterEncoding}</prop>
                 <prop key="hibernate.connection.useUnicode">${hibernate.connection.useUnicode}</prop>
			</props>
			 
			 
			<!-- below configuraion is working, but it was hard code. So now we are using
			above configuration --> 
			<!-- <props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">
					false
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="org.hibernate.envers.store_data_at_delete">true</prop>
				<prop key="org.hibernate.envers.revision_on_collection_change">false
				</prop>
				<prop key="org.hibernate.envers.track_entities_changed_in_revision">false</prop>
				<prop key="org.hibernate.envers.global_with_modified_flag">false</prop>
			</props> -->
		</property>
   </bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- HibernateTransactionManager delegates responsibility for transaction 
		management to an org.hibernate.Transaction object that it retrieves from 
		the Hibernate session. When a transaction successfully completes, HibernateTransactionManager 
		will call the commit() method on the Transaction object. Similarly, when 
		a transaction fails, the rollback() method will be called on the Transaction 
		object. -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	   <property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- If we’re using Hibernate contextual sessions and not a Hibernate template, 
		then how can the exception translation take place? To add exception translation 
		to a template-less Hibernate DAO, we just need to add a PersistenceExceptionTranslationPostProcessor 
		bean to the Spring application context: PersistenceExceptionTranslationPostProcessor 
		is a bean post processor which adds an advisor to any bean that’s annotated 
		with @Repository so that any platform specific exceptions are caught and 
		then re-thrown as one of Spring’s unchecked data access exceptions. -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"></bean>
	 

</beans>	